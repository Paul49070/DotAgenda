<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf">

    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="BtnImgICON">
        <Style.Setters>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"  CornerRadius="10">
                            <Grid HorizontalAlignment="stretch" VerticalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="100"/>
                                </Grid.ColumnDefinitions>

                                <Border Background="Transparent" Grid.Column="1"  CornerRadius="10">
                                    <wpf:PackIcon HorizontalAlignment="Center" VerticalAlignment="Center" Kind="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" Width="26" Height="26" Foreground="{TemplateBinding Foreground}" />
                                </Border>

                                <TextBlock Grid.Column="2" Background="Transparent" HorizontalAlignment="Stretch" 
                                       Text="{TemplateBinding Tag}" FontSize="15" Foreground="{TemplateBinding Foreground}" 
                                       VerticalAlignment="Center" FontFamily="/Font/#Poppins" Margin="5,0,7,0"/>

                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource Font}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Secondary}"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Font_Grey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="BtnImgICONbis">
        <Style.Setters>
            <Setter Property="MinWidth" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
            <Setter Property="MinHeight" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  CornerRadius="40" Padding="8">
                            <wpf:PackIcon Kind="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18" Foreground="{TemplateBinding Foreground}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Font_Grey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="BtnImgICONthird">
        <Style.Setters>
            <Setter Property="MinWidth" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
            <Setter Property="MinHeight" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  CornerRadius="40" Padding="8">
                            <wpf:PackIcon Kind="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18" Foreground="{TemplateBinding Foreground}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Font_Grey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="btnimg_trash">
        <Style.Setters>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid HorizontalAlignment="stretch" VerticalAlignment="Stretch">
                            <Border Background="{TemplateBinding Background}" CornerRadius="10">
                                <Image x:Name="img" Source="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" OpacityMask="White" Width="24" Height="24"/>
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" TargetName="img" Value="/Img/IconEvent/trash_blanc.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Secondary}"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Contrast}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="btnimg_folder">
        <Style.Setters>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid HorizontalAlignment="stretch" VerticalAlignment="Stretch">
                            <Border Background="{TemplateBinding Background}" CornerRadius="10">
                                <Image x:Name="img" Source="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" OpacityMask="White" Width="24" Height="24"/>
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" TargetName="img" Value="/Img/IconEvent/folder_blanc.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Secondary}"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Contrast}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="btnimg_star">
        <Style.Setters>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid HorizontalAlignment="stretch" VerticalAlignment="Stretch">
                            <Border Background="{TemplateBinding Background}" CornerRadius="10">
                                <Image x:Name="img" Source="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" OpacityMask="White" Width="24" Height="24"/>
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" TargetName="img" Value="/Img/IconEvent/star_blanc.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Secondary}"/>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Contrast}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    
</ResourceDictionary>